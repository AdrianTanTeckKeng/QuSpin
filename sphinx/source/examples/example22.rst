.. _example22-label:

Efficient time evolution: expm_multiply_parallel
------------------------------------------------

In this example, we promote the usage of the function `tools.evolution.expm_multiply_parallel()`, designed to compute
matrix exponentials for **static** Hamiltonians (but note that it can also be used for piecel-wise constant dynamics, e.g. for periodically-driven systems, to reach long times for larger system sizes).

This function is an omp-parallelized implementation of [arXiv paper here]. See line 5 in the code snippet below to set the number of omp threads (omp version of QuSpin only). 

Consider unitary time evolution generated by the :math:`T`-periodic Hamiltonian

.. math::
	H(t) = \bigg\{ \!\begin{array}{c}\! &H_0,\qquad 0\leq t\leq T/2 \\ \!&H_1,\qquad T/2<t\leq T \end{array} 

where

.. math::
	H_0 = ... \\
	H_1 = ...

We choose as the initial state the ground state of the Hamiltonian :math:`H_\mathrm{ave} = 1/2(H_0+H_1)`, and evolve it under :math:`H(t)`. Every evolution cycle, we measure the energy density and the entanglement entropy density of half the system: 

.. math::
	\mathcal{E}_\mathrm{ave}(\ell T) &= \frac{1}{L}\langle\psi(\ell T)| H_\mathrm{ave} |\psi(\ell T)\rangle \\
	s_\mathrm{ent}(\ell T) &= \frac{1}{L_A} \mathrm{tr}_A \left[ \rho_A(\ell T)\log \rho_A(\ell T)\right], \quad \rho_A(\ell T) = \mathrm{tr}_{L \backslash L_A} |\psi(\ell T)\rangle\langle\psi(\ell T)|.


Script
------

:download:`download script <../../../examples/scripts/example22.py>`

.. literalinclude:: ../../../examples/scripts/example22.py
	:linenos:
	:language: python
	:lines: 1-