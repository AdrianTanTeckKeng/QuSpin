.. _nlce-label:


A tutorial on QuSpin's `nlce` module
====================================

Numerical linked-cluster expansions (NLCE) are a class a method which combines perturbative linked cluster expansion with exact diagonalization to perform calculations of lattice models directly in the thermodynamic limit. As such we have built a module into QuSpin that can generate the clusters used in these expansions. For an introduction to NLCE methods we suggest you read `A Short Introduction to Numerical Linked-Cluster Expansions <https://arxiv.org/abs/1207.3366>`_.


**TUTORIAL CONTENTS:**

* `Basics of NLCE`_
* `NLCE Tools in QuSpin`_
	* `


Basics of NLCE
++++++++++++++

The Inclusion Principle
````````````````````````

The basic idea behind linked cluster expansions is that quantities that are extensive :math:`P` in system size can be expressed as sums over linked clusters that are subgraphs of the full system. In the thermodynamic limit this series consists every possible linked cluster :math:`c` that is a subgraph of the infinite lattice:

.. math::
  \frac{P}{N}=\sum_c L(c)W_P(c)

Here, :math:`L(c)` is the number of times the cluster `c` can be embedded in the infinite lattice up to translations and :math:`W_P(c)` is the weight of quantity `P` of cluster `c` in the LCE. Here we assume that one can calculate an extensive property :math:`P(c)` using the physical system defined by the Hamiltonian :math:`H(c)` on the linked cluster. This can be the Free energy of the system, the entropy, the energy, correlation functions, anything that is an extensive in the system size. The weight, :math:`W_P(c)`, for property :math:`P` of a given cluster :math:`c` is not :math:`P(c)`, but follows, what is called, the inclusion principle:

.. math::
  W_P(c) = P(c) - \sum_{s\in c} W_P(s)

 In words, this equation states that the weight of property :math:`P` for a given cluster contains only contributions of correlations between sites that are not contained in the subgraphs of that cluster. This equation also shows us the linked cluster expansion applied to the finite cluster :math:`c`.  In practice this series has to be truncated to a finite order. In some cases this can cause what appears to be a divergent series, however this is only indicating that the dominate weight in the series is shifting to clusters that are larger than what is accounted for in the truncated expansion. 

 Another thing to note is that for clusters that are topologically equivilant to one another, some quantities :math:`P(c)` have the same value, and hence, have the same weight in the series. In this case is it sufficient to only sum over clusters which are topologically unqiue and account for the the topological equivilance in the multiplicity :math:`L(c)`. As of version 0.4.0 the NLCE tools in QuSpin only calculates the series for topologically distinct clusters. 

In general it is arbitrary what building block are used to build the linked clusters, so long as they can be enbedded in the lattice. The simpliest building block would be a single site. Regardless of the building block used, he number of linked clusters that are topologically distinct grows exponentially for larger cluster sizes. As such, it can be advantagous to use LCEs that are built out of plaquets instead of individual sites as the number of sites per plaquet make it so that the total number of clusters in the expansion is smaller compared to the site expansion but the series will contain clusters that are much larger in terms of the number of individual sites. 

NLCE Tools in QuSpin
++++++++++++++++++++

General Work-flow
`````````````````

QuSpin's NLCE tools provides a simple work-flow for doing NLCE when combined with existing ED methods availible in QuSpin or any other python based methods one might be interested in using. The general work-flow consists of first constucting a class that stores all the topological clusters for the LCE which the user can pickle and reuse for many calculations. These classes provide the user a simple iterface to access cluster information like the graph and the position of the sites on the infinite lattice. Using this interface one can calculate :math:`P(c)` for all clusters in the expansion. The interface allows the user to access a single cluster at a time as well as a iterator functionality allowing one to loop over a series of clusters in a pythonic manner. One can combine this with `mpi4py <https://mpi4py.readthedocs.io/en/stable/>`_ to distribute each calculation over many cores. Once all :math:`P(c)` are calculated the same object should then be used to calculate the partial sums of he Series. There is even built in methods to perform series extrapolations, like the Wynn epsilon method, with no extra effort. 


Site based NCLE: Defining lattice
`````````````````````````````````

Now that we understand the general work flow we can discuss how to specify the lattice used in the LCE. First, its worth noting that expansions generated by the NLCE tools is the expansion is for the infinite lattice but because the series is truncated, the clusters have a bounded size. Therefore, it is sufficient to determine the clusters used in the expansion on a finite periodic lattice we will call this the Embedding Lattice (EL). Every point on the EL coreesponds to a building block of a cluster, be it a single site or a plaquet that contains multiple sites. In the plaquet expansion it is possible for plaquets to share sites. In that case one has to adjust the multiplicity :math:`L(c)`. In most cases this should be taken care of by QuSpin but there is also a way of overriding this manually. 

The EL is finite, but is large enough such that all the clusters used in the LCE will not be large enough to wrap around and connect on the other side. The Embedding lattice defines the point-group and the translation symmetries of building blocks that make up the clusters on the infinite lattice, e.g. for the site based expansions the symmetries are the symmetry transformation of the sites in the Embedding Lattice, while for the complex building blocks the Embedding Lattice defines how the lattice symmetries transform these blocks into one another. 

Another ingredient required to build up the LCE is how he building blocks link together. In the case of this is simply a list that defines all the neighboring connections to other sites, but for plaquets one can specify the intra- and inter-plaquet connections.


