#ifndef __BITS_INFO_H__
#define __BITS_INFO_H__

#include "numpy/ndarraytypes.h"
#include <cinttypes>


typedef npy_uint8 uint8_t;
typedef npy_uint16 uint16_t;
typedef npy_uint32 uint32_t;
typedef npy_uint64 uint64_t;

template<typename T,int N>
struct eob  // every other bit 1
{enum{val=((T)eob<T,N-1>::val << (T)2)+(T)1};};

template<typename T>
struct eob<T,1>
{enum{val=(T)1};};

template<typename I>
struct bit_info
{};



#include "boost/multiprecision/cpp_int.hpp"

typedef boost::multiprecision::uint128_t uint128_t;
typedef boost::multiprecision::uint256_t uint256_t;
typedef boost::multiprecision::uint512_t uint512_t;
typedef boost::multiprecision::uint1024_t uint1024_t;


template<>
struct bit_info<uint1024_t>
{ enum {ld_bits=10,bits=1024};
  typedef int bit_index_type;
};

template<>
struct bit_info<uint512_t>
{ enum {ld_bits=9,bits=512};
  typedef int bit_index_type;
};

template<>
struct bit_info<uint256_t>
{ enum {ld_bits=8,bits=256};
  typedef int bit_index_type;
};

template<>
struct bit_info<uint128_t>
{ enum {ld_bits=7,bits=128};
  typedef int bit_index_type;
};


template<>
struct bit_info<uint64_t>
{	enum {ld_bits=6,bits=64,bytes=8};
  typedef int bit_index_type;
};

template<>
struct bit_info<uint32_t>
{	enum {ld_bits=5,bits=32,bytes=4};
  typedef int bit_index_type;
};

template<>
struct bit_info<uint16_t>
{	enum {ld_bits=4,bits=16,bytes=2};
  typedef int bit_index_type;
};

template<>
struct bit_info<uint8_t>
{ enum {ld_bits=3,bits=8,bytes=1};
  typedef int bit_index_type;
};


/*
static unsigned short tab0[1024] = { 0,1,0,1,2,0,2,1,2,0,1,2,3,0,3,1,3,0,1,3,2,3,0,2,3,1,2,3,0,1,2,3,
                                     4,0,4,1,4,0,1,4,2,4,0,2,4,1,2,4,0,1,2,4,3,4,0,3,4,1,3,4,0,1,3,4, \
                                     2,3,4,0,2,3,4,1,2,3,4,0,1,2,3,4,5,0,5,1,5,0,1,5,2,5,0,2,5,1,2,5, \
                                     0,1,2,5,3,5,0,3,5,1,3,5,0,1,3,5,2,3,5,0,2,3,5,1,2,3,5,0,1,2,3,5, \
                                     4,5,0,4,5,1,4,5,0,1,4,5,2,4,5,0,2,4,5,1,2,4,5,0,1,2,4,5,3,4,5,0, \
                                     3,4,5,1,3,4,5,0,1,3,4,5,2,3,4,5,0,2,3,4,5,1,2,3,4,5,0,1,2,3,4,5, \
                                     6,0,6,1,6,0,1,6,2,6,0,2,6,1,2,6,0,1,2,6,3,6,0,3,6,1,3,6,0,1,3,6, \
                                     2,3,6,0,2,3,6,1,2,3,6,0,1,2,3,6,4,6,0,4,6,1,4,6,0,1,4,6,2,4,6,0, \
                                     2,4,6,1,2,4,6,0,1,2,4,6,3,4,6,0,3,4,6,1,3,4,6,0,1,3,4,6,2,3,4,6, \
                                     0,2,3,4,6,1,2,3,4,6,0,1,2,3,4,6,5,6,0,5,6,1,5,6,0,1,5,6,2,5,6,0, \
                                     2,5,6,1,2,5,6,0,1,2,5,6,3,5,6,0,3,5,6,1,3,5,6,0,1,3,5,6,2,3,5,6, \
                                     0,2,3,5,6,1,2,3,5,6,0,1,2,3,5,6,4,5,6,0,4,5,6,1,4,5,6,0,1,4,5,6, \
                                     2,4,5,6,0,2,4,5,6,1,2,4,5,6,0,1,2,4,5,6,3,4,5,6,0,3,4,5,6,1,3,4, \
                                     5,6,0,1,3,4,5,6,2,3,4,5,6,0,2,3,4,5,6,1,2,3,4,5,6,0,1,2,3,4,5,6, \
                                     7,0,7,1,7,0,1,7,2,7,0,2,7,1,2,7,0,1,2,7,3,7,0,3,7,1,3,7,0,1,3,7, \
                                     2,3,7,0,2,3,7,1,2,3,7,0,1,2,3,7,4,7,0,4,7,1,4,7,0,1,4,7,2,4,7,0, \
                                     2,4,7,1,2,4,7,0,1,2,4,7,3,4,7,0,3,4,7,1,3,4,7,0,1,3,4,7,2,3,4,7, \
                                     0,2,3,4,7,1,2,3,4,7,0,1,2,3,4,7,5,7,0,5,7,1,5,7,0,1,5,7,2,5,7,0, \
                                     2,5,7,1,2,5,7,0,1,2,5,7,3,5,7,0,3,5,7,1,3,5,7,0,1,3,5,7,2,3,5,7, \
                                     0,2,3,5,7,1,2,3,5,7,0,1,2,3,5,7,4,5,7,0,4,5,7,1,4,5,7,0,1,4,5,7, \
                                     2,4,5,7,0,2,4,5,7,1,2,4,5,7,0,1,2,4,5,7,3,4,5,7,0,3,4,5,7,1,3,4, \
                                     5,7,0,1,3,4,5,7,2,3,4,5,7,0,2,3,4,5,7,1,2,3,4,5,7,0,1,2,3,4,5,7, \
                                     6,7,0,6,7,1,6,7,0,1,6,7,2,6,7,0,2,6,7,1,2,6,7,0,1,2,6,7,3,6,7,0, \
                                     3,6,7,1,3,6,7,0,1,3,6,7,2,3,6,7,0,2,3,6,7,1,2,3,6,7,0,1,2,3,6,7, \
                                     4,6,7,0,4,6,7,1,4,6,7,0,1,4,6,7,2,4,6,7,0,2,4,6,7,1,2,4,6,7,0,1, \
                                     2,4,6,7,3,4,6,7,0,3,4,6,7,1,3,4,6,7,0,1,3,4,6,7,2,3,4,6,7,0,2,3, \
                                     4,6,7,1,2,3,4,6,7,0,1,2,3,4,6,7,5,6,7,0,5,6,7,1,5,6,7,0,1,5,6,7, \
                                     2,5,6,7,0,2,5,6,7,1,2,5,6,7,0,1,2,5,6,7,3,5,6,7,0,3,5,6,7,1,3,5, \
                                     6,7,0,1,3,5,6,7,2,3,5,6,7,0,2,3,5,6,7,1,2,3,5,6,7,0,1,2,3,5,6,7, \
                                     4,5,6,7,0,4,5,6,7,1,4,5,6,7,0,1,4,5,6,7,2,4,5,6,7,0,2,4,5,6,7,1, \
                                     2,4,5,6,7,0,1,2,4,5,6,7,3,4,5,6,7,0,3,4,5,6,7,1,3,4,5,6,7,0,1,3, \
                                     4,5,6,7,2,3,4,5,6,7,0,2,3,4,5,6,7,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7 }


static unsigned short n[256] = { 0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
                                 1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5, \
                                 1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5, \
                                 2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6, \
                                 1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5, \
                                 2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6, \
                                 2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6, \
                                 3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7, \
                                 1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5, \
                                 2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6, \
                                 2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6, \
                                 3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7, \
                                 2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6, \
                                 3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7, \
                                 3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7, \
                                 4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8 }

static unsigned short tabofs[256] = { 0,0,1,2,4,5,7,9,12,13,15,17,20,22,25,28,
                                      32,33,35,37,40,42,45,48,52,54,57,60,64,67,71,75, \
                                      80,81,83,85,88,90,93,96,100,102,105,108,112,115,119,123, \
                                      128,130,133,136,140,143,147,151,156,159,163,167,172,176,181,186, \
                                      192,193,195,197,200,202,205,208,212,214,217,220,224,227,231,235, \
                                      240,242,245,248,252,255,259,263,268,271,275,279,284,288,293,298, \
                                      304,306,309,312,316,319,323,327,332,335,339,343,348,352,357,362, \
                                      368,371,375,379,384,388,393,398,404,408,413,418,424,429,435,441, \
                                      448,449,451,453,456,458,461,464,468,470,473,476,480,483,487,491, \
                                      496,498,501,504,508,511,515,519,524,527,531,535,540,544,549,554, \
                                      560,562,565,568,572,575,579,583,588,591,595,599,604,608,613,618, \
                                      624,627,631,635,640,644,649,654,660,664,669,674,680,685,691,697, \
                                      704,706,709,712,716,719,723,727,732,735,739,743,748,752,757,762, \
                                      768,771,775,779,784,788,793,798,804,808,813,818,824,829,835,841, \
                                      848,851,855,859,864,868,873,878,884,888,893,898,904,909,915,921, \
                                      928,932,937,942,948,953,959,965,972,977,983,989,996,1002,1009,1016 }




*/


template<class T>
typename bit_info<T>::bit_index_type bit_pos(T x, typename bit_info<T>::bit_index_type *idx)
{
  typename bit_info<T>::bit_index_type n = 0;
  do {
    if (x & 1) *(idx++) = n;
    n++;
  } while (x >>= 1); 
  return n;
}

#if defined(__GNUC__) || defined(__GNUG__)

template<class T>
T inline bit_count(T v,int l){
  v = v & (((~(T)0) >> 1) >> (bit_info<T>::bits - 1 - l));

  if(std::is_same<T, uint64_t>::value){
    return __builtin_popcountll(v);
  }
  else if(std::is_same<T, uint32_t>::value){
    return __builtin_popcount(v);
  }
  else if(std::is_same<T, uint16_t>::value){
    return __builtin_popcount((uint32_t)v);
  }
  else if(std::is_same<T, uint8_t>::value){
    return __builtin_popcount((uint32_t)v);
  }
  else{
    v = v - ((v >> 1) & (T)~(T)0/3);                           // temp
    v = (v & (T)~(T)0/15*3) + ((v >> 2) & (T)~(T)0/15*3);      // temp
    v = (v + (v >> 4)) & (T)~(T)0/255*15;                      // temp
    return (T)(v * ((T)~(T)0/255)) >> ((bit_info<T>::bytes - 1) * 8); // count
  }

}
#else

template<class T>
T inline bit_count(T v,int l){
  v = v & (((~(T)0) >> 1) >> (bit_info<T>::bits - 1 - l));
  v = v - ((v >> 1) & (T)~(T)0/3);                           // temp
  v = (v & (T)~(T)0/15*3) + ((v >> 2) & (T)~(T)0/15*3);      // temp
  v = (v + (v >> 4)) & (T)~(T)0/255*15;                      // temp
  return (T)(v * ((T)~(T)0/255)) >> ((bit_info<T>::bytes - 1) * 8); // count

}

#endif




#endif