

def {type_code}_p_z_op(_np.ndarray[NP_INT8_t,ndim=1] N, _np.ndarray[basis_type,ndim=1] basis, str opstr, _np.ndarray[NP_INT32_t,ndim=1] indx, {c_complex_type} J, int L, int pblock, int zblock):
	cdef state_type s
	cdef int Ns,error,ss,i,q,g
	cdef _np.ndarray[basis_type,ndim=1] R = _np.zeros(3,dtype=basis.dtype)
	cdef _np.ndarray[NP_INT32_t,ndim=1] row
	cdef _np.ndarray[{c_matrix_type},ndim=1] ME
	cdef {c_float_type} n


	Ns = basis.shape[0]
	row,ME,error = {type_code}_spinop(basis,opstr,indx,J)

	if error != 0:
		return row,ME,error

	for i in range(Ns):
		s = row[i]
		RefState_P_Z_template(fliplr,flip_all,s,L,R)

		s = R[0]
		q = R[1]
		g = R[2]
		
		ss = findzstate(basis,Ns,s)
		row[i] = ss

		if ss == -1: continue

		n = N[ss]
		n /= N[i]

		ME[i] *= sqrt(n)*(pblock**q)*(zblock**g)

	return row,ME,error







