

def {type_code}_p_op(_np.ndarray[NP_INT8_t,ndim=1] N, _np.ndarray[basis_type,ndim=1] basis, str opstr, _np.ndarray[NP_INT32_t,ndim=1] indx, {c_complex_type} J,int L,int pblock):
	cdef basis_type s
	cdef int error,i,ss,Ns,q
	cdef _np.ndarray[basis_type,ndim=1] R = _np.zeros(2,dtype=basis.dtype)
	cdef _np.ndarray[NP_INT32_t,ndim=1] col
	cdef _np.ndarray[{c_matrix_type},ndim=1] ME

	cdef {c_float_type} n


	Ns = basis.shape[0]
	col,ME,error = {type_code}_spinop(basis,opstr,indx,J)

	if error != 0:
		return col,ME,error

	for i in range(Ns):
		s = col[i]
		RefState_P_template(fliplr,s,L,R)

		s = R[0]
		q = R[1]
		
		ss = findzstate(basis,Ns,s)
		col[i] = ss
		if ss == -1: continue

		n = N[ss]
		n /= N[i]

		ME[i] *= (pblock**q)*sqrt(n)

	return col,ME,error





