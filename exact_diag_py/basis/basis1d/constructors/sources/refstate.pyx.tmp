
cdef {c_basis_type} findzstate(_np.ndarray[{np_basis_type}_t,ndim=1] A,{c_basis_type} N, {c_basis_type} s):
	cdef {c_basis_type} bmin, bmax, b, A_1

	bmin = 0
	bmax = N-1
	while (bmin <= bmax):
		b = (bmin + bmax)/2
		A_1 = A[b]
		if ( A_1 < s ):
			bmin = b + 1
		elif ( A_1 > s ):
			bmax = b - 1
		else:
			return b

	return -1





cdef int RefState_P({c_basis_type} s,{c_basis_type} L,_np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef {c_basis_type} t

	R[0] = s
	R[1] = 0


	t = fliplr(s,L)
	if t < s:
		R[0] = t
		R[1] = 1

	return 0











cdef int RefState_Z({c_basis_type} s,{c_basis_type} L,_np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	R[0] = s
	R[1] = 0

	cdef {c_basis_type} t
	t = flip_all(s,L)
	if t < s:
		R[0] = t
		R[1] = 1

	return 0









cdef int RefState_PZ({c_basis_type} s,{c_basis_type} L, _np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef {c_basis_type} t

	R[0] = s
	R[1] = 0


	t = fliplr(s,L)
	t = flip_all(t,L)
	if t < s:
		R[0] = t
		R[1] = 1

	return 0







cdef int RefState_P_Z({c_basis_type} s,{c_basis_type} L, _np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef {c_basis_type} t,r

	R[0] = s
	R[1] = 0
	R[2] = 0

	r = s
	t = fliplr(s,L)
	if t < r:
		r = t
		R[1] = 1
		R[2] = 0


	t = flip_all(s,L)
	if t < r:
		r = t
		R[1] = 0
		R[2] = 1



	t = fliplr(s,L)
	t = flip_all(t,L)
	if t < r:
		r = t
		R[1] = 1
		R[2] = 1

	R[0] = r

	return 0



cdef int RefState_T({c_basis_type} s,int L,int T,_np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef int i
	cdef {c_basis_type} r,t

	r = s
	t = s
	l = 0

	for i in range(1,L/T+1):
		t=shift(t,-T,L)
		if t < r:
			r=t; l=i;

	R[0] = r
	R[1] = l

	return 0





cdef int RefState_T_Z({c_basis_type} s,int L,int T,_np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef int i,l,g
	cdef {c_basis_type} r,t

	r = s
	t = s

	l = 0
	g = 0

	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; g=0;

	t = flip_all(s,L)
	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; g=1;


	R[0] = r
	R[1] = l
	R[2] = g

	return 0







cdef int RefState_T_P({c_basis_type} s,int L,int T,_np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef int i,l,q
	cdef {c_basis_type} r,t

	r = s
	t = s

	l = 0
	q = 0

	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; q=0;

	t = fliplr(s,L)
	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; q=1;


	R[0] = r
	R[1] = l
	R[2] = q

	return 0












cdef int RefState_T_PZ({c_basis_type} s,int L,int T,_np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef int i
	cdef {c_basis_type} r,t,l,qg

	r = s
	t = s

	l = 0
	qg = 0

	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; qg=0;

	t = fliplr(s,L)
	t = flip_all(t,L)
	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; qg=1;


	R[0] = r
	R[1] = l
	R[2] = qg

	return 0











cdef int RefState_T_P_Z({c_basis_type} s,int L,int T,_np.ndarray[{np_basis_type}_t,ndim=1,mode='c'] R):
	cdef int i,l,q
	cdef {c_basis_type} r,t

	r = s
	t = s

	l = 0
	q = 0
	g = 0
	
	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; q=0;g=0;

	t = fliplr(s,L)
	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; q=1;g=0;

	t = flip_all(s,L)
	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; q=0;g=1;

	t = fliplr(s,L)
	t = flip_all(t,L)
	for i in range(1,L/T+1):
		t = shift(t,-T,L)
		if t < r:
			r=t; l=i; q=1;g=1;


	R[0] = r
	R[1] = l
	R[2] = q
	R[3] = g

	return 0

