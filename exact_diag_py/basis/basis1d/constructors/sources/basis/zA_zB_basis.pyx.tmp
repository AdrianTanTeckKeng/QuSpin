def make_m_zA_zB_basis(int L, int Nup, _np.ndarray[{np_basis_type}_t,ndim=1] basis):
	cdef {c_basis_type} s,Ns
	cdef NP_INT8_t rzA, rzB, rz
	cdef char stp
	cdef int j

	s = 0
	for j in range(Nup):
		s += ( 1ull << j )

	if (Nup == L) or (Nup == 0):
		return 0

	stp = 0
	Ns = 0
	while True:

		rzA = CheckState_ZA(s,L)
		rzB = CheckState_ZB(s,L)
		rz  = CheckState_Z(s,L)
		if rzA > 0 and rzB > 0 and rz > 0:
			basis[Ns] = s
			Ns += 1

		stp = 1 & ( s >> (L-1) ) 
		for i in range(1,Nup):
			stp &= 1 & ( s >> (L-i-1) )

		if stp:
			break


		s = next_state(s)


	return Ns



def make_zA_zB_basis(int L, _np.ndarray[{np_basis_type}_t,ndim=1] basis):
	cdef {c_basis_type} Ns,s
	cdef NP_INT8_t rz, rzA, rzB

	Ns = 0

	for s in range(1ull << L):
		rzA = CheckState_ZA(s,L)
		rzB = CheckState_ZB(s,L)
		rz  = CheckState_Z(s,L)
		if rz > 0 and rzA > 0 and rzB > 0:
			basis[Ns] = s
			Ns += 1

	return Ns
