


def {type_code}_t_op(_np.ndarray[NP_INT8_t,ndim=1] N, _np.ndarray[{np_basis_type}_t,ndim=1] basis, str opstr, _np.ndarray[NP_INT32_t,ndim=1] indx, int L, int kblock, int a):
	cdef {c_basis_type} i,s,l
	cdef {c_basis_type} Ns = basis.shape[0]
	cdef _np.ndarray[{np_basis_type}_t,ndim = 1] R = _np.zeros(2,{np_basis_type})
	cdef _np.ndarray[{np_basis_type}_t,ndim=1] col
	cdef _np.ndarray[{np_matrix_type}_t,ndim=1] ME
	cdef int error
	cdef {c_float_type} n,k

	k = (2.0*_np.pi*kblock*a)/L

	col,ME,error = {type_code}_spinop(basis,opstr,indx)

	if {check_imag} and ((2*a*kblock) % L) != 0:
		error = -1

	if error != 0:
		return col,ME,error


	for i in range(Ns):
		s = col[i]
		RefState_T(s,L,a,R)

		s = R[0]
		l = R[1]
		
		s = findzstate(basis,Ns,s)
		col[i] = s

		if s == -1: continue

		n = N[i]
		n /= N[s]
		n = sqrt(n)
		ME[i] *= n

		if {check_imag}:
			ME[i] *= (-1.0)**(l*2*a*kblock/L)
		else:
			ME[i] *= (cos(k*l) - 1.0j * sin(k*l))

			

	return col,ME,error




