

cdef {np_matrix_type}_t {type_code}_MatrixElement_Z(int L,int zblock, int kblock, int a, {c_basis_type} l, {c_float_type} k, {c_basis_type} g,NP_INT8_t Nr,NP_INT8_t Nc,NP_INT8_t mr,NP_INT8_t mc):
	cdef {c_float_type} nr,nc
	cdef {np_matrix_type}_t ME
	

	if mr >=0:
		nr = (1 + zblock*cos(k*mr))/Nr
	else:
		nr = 1.0/Nr

	if mc >= 0:
		nc = (1 + zblock*cos(k*mc))/Nc
	else:
		nc = 1.0/Nc


	ME=sqrt(nc/nr)*(zblock**g)

	if {check_imag}:
		ME *= (-1)**(2*l*a*kblock/L)
	else:
		ME *= (cos(k*l) - 1.0j * sin(k*l))

	return ME



def {type_code}_t_z_op(_np.ndarray[NP_INT8_t,ndim=1] N,_np.ndarray[NP_INT8_t,ndim=1] m, _np.ndarray[{np_basis_type}_t,ndim=1] basis, str opstr, _np.ndarray[NP_INT32_t,ndim=1] indx, int L, int zblock, int kblock, int a):
	cdef {c_basis_type} i,s,l,g,t
	cdef {c_basis_type} Ns = basis.shape[0]
	cdef _np.ndarray[{np_basis_type}_t,ndim = 1] R = _np.zeros(3,{np_basis_type})
	cdef _np.ndarray[{np_basis_type}_t,ndim=1] col
	cdef _np.ndarray[{np_matrix_type}_t,ndim=1] ME
	cdef int error
	cdef {c_float_type} k = (2.0*_np.pi*kblock*a)/L

	col,ME,error = {type_code}_spinop(basis,opstr,indx)

	if {check_imag} and (2*kblock*a % L) != 0:
		error = -1

	if error != 0:
		return col,ME,error

	for i in range(Ns):
		s = col[i]
		RefState_T_Z(s,L,a,R)

		s = R[0]
		l = R[1]
		g = R[2]

		t = s
		s = findzstate(basis,Ns,s)
		col[i] = s
		if s == -1: continue

		ME[i] *= {type_code}_MatrixElement_Z(L,zblock,kblock,a,l,k,g,N[i],N[s],m[i],m[s])
			

	return col,ME,error







