
cdef {c_basis_type} shift({c_basis_type} I,int shift,int period):
# this functino is used to shift the bits of an integer by 'shift' bits.
# it is used when constructing the momentum states
	cdef {c_basis_type} Imax= (1ull << period) -1
	if I==0 or I==Imax:
		return I
	else:
		if shift < 0:
			shift=-shift
			return ((I & Imax) >> shift%period) | (I << (period-(shift%period)) & Imax)
		else:
			return (I << shift%period) & Imax | ((I & Imax) >> (period-(shift%period)))





cdef {c_basis_type} fliplr({c_basis_type} I, int length):
# this function flips the bits of an integer around the centre, e.g. 1010 -> 0101
# (generator of) parity symmetry
	cdef {c_basis_type} out = 0
	cdef int i
	for i in range(length):
		if ( (I >> i) & 1 ) == 1:
			out += (1ull << (length-1-i))
		
	return out




cdef inline {c_basis_type} flip_all({c_basis_type} I, {c_basis_type} length):
	return I ^ ( (1ull << length)-1 ) &~ 0



cdef {c_basis_type} next_state({c_basis_type} v):
	cdef {c_basis_type} t = (v | (v - 1)) + 1
	return t | ((((t & -t) / (v & -v)) >> 1) - 1)







