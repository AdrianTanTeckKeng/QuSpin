subroutine checkstate_t_z(s,L,k,a,N,m)
implicit none
integer(kind=4), intent(in) :: s,L,k,a
integer(kind=1), intent(out) :: N,m
integer(kind=4) :: t,i,NN

t=s
N=-1
m=-1

do i=1,L/a
t=ishftc(t,a,L)
if ( t .lt. s ) then
return
else if ( t .eq. s) then 
if ( modulo(k,(L/(a*int(i)))) .ne. 0) then
return
end if
N=int(i,1)

exit
end if
end do

NN = i
t = s
call flip_all(t,L)

do i=0,NN-1
if (t .lt. s) then
N = -1
return
else if(t .eq. s) then
m = int(i,1)
return
end if
t = ishftc(t,a,L)
end do




end subroutine





!subroutine make_t_z_basis(L,mbasis,Ns_m,zblock,kblock,a,N,m)
!implicit none
!real(kind=8), parameter :: pi = 4.0d0*datan(1.0d0)
!integer(kind=4), intent(in) :: L, kblock, zblock, Ns_m,a
!integer(kind=4), intent(inout) ,dimension(Ns_m) :: mbasis
!integer(kind=1), intent(out), dimension(Ns_m) :: N,m
!integer(kind=4) :: i

!do i=1,Ns_m
!call checkstate_t_z(mbasis(i),L,kblock,a,N(i),m(i))

!if(m(i) .ge. 0)then
!if( zblock*dcos(2*kblock*m(i)*pi/L) .eq. -1.0d0) then
!N(i) = 0
!m(i) = 0
!mbasis(i) = -1
!end if
!end if

!if(N(i) .lt. 0) then
!m(i)=0
!N(i)=0
!mbasis(i)=-1
!end if

!end do

!end subroutine















subroutine make_t_z_basis(L,zblock,kblock,a,N,m,basis,Ns,Ns_out)
implicit none
real(kind=8), parameter :: pi = 4.0d0*datan(1.0d0)
integer(kind=4), intent(in) :: L,zblock,kblock,a,Ns
integer(kind=4), intent(inout), dimension(Ns) :: basis
integer(kind=1), intent(inout), dimension(Ns) :: N,m
integer(kind=4), intent(out) :: Ns_out
integer(kind=4) :: s
integer(kind=1) :: NN,mm


Ns_out = 0
do s=0,2**L - 1
call CheckState_t_z(s,L,kblock,a,NN,mm)

if((mm .ge. 0) .and. ( zblock*dcos(2*kblock*mm*pi/L) .eq. -1.0d0)) then
NN = -1
end if

if(NN .ge. 0) then
Ns_out = Ns_out + 1
basis(Ns_out) = s
N(Ns_out) = NN
m(Ns_out) = mm
end if

end do 

end subroutine











subroutine make_m_t_z_basis(L,Nup,zblock,kblock,a,N,m,basis,Ns,Ns_out)
implicit none
real(kind=8), parameter :: pi = 4.0d0*datan(1.0d0)
integer(kind=4), intent(in) :: L,Nup,zblock,kblock,a,Ns
integer(kind=4), intent(inout) ,dimension(Ns) :: basis
integer(kind=1), intent(inout), dimension(Ns) :: N,m
integer(kind=4), intent(out) :: Ns_out
integer(kind=4), dimension(L) :: i_bits
Integer(kind=4) :: s,t
integer(kind=1) :: NN,mm

i_bits=0
do s=1,Nup
i_bits(s)=2**(s-1)
end do


Ns_out = 0
s=sum(i_bits)

if(Nup.eq.0) then

call CheckState_t_z(s,L,kblock,a,NN,mm)

if((mm .ge. 0) .and. ( zblock*dcos(2*kblock*mm*pi/L) .eq. -1.0d0)) then
NN = -1
end if

if(NN .ge. 0) then
Ns_out = Ns_out + 1
basis(Ns_out) = s
N(Ns_out) = NN
m(Ns_out) = mm
end if

return

end if


do while(.not.btest(s,L))

call CheckState_t_z(s,L,kblock,a,NN,mm)

if((mm .ge. 0) .and. ( zblock*dcos(2*kblock*mm*pi/L) .eq. -1.0d0)) then
NN = -1
end if

if(NN .ge. 0) then
Ns_out = Ns_out + 1
basis(Ns_out) = s
N(Ns_out) = NN
m(Ns_out) = mm
end if

t=ior(s,s-1)+1
s=ior(t,ishft(iand(t,-t)/iand(s,-s),-1)-1)
end do


end subroutine

